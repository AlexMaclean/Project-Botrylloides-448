#!/bin/bash

TRIALS=50
CONFIG_FILE=$1
READ_FILE=$2

DATA_FILE=data.csv
ASSEMBLE=/home/ubuntu/Project-Botrylloides-448/scripts/assemble-with-stats

#-------------------------------------------------------------------------------

# Top level function to run experiment, just loops through values running trials
function run-experiment {
    NEW_CONFIG_FILE="./$(basename CONFIG_FILE)"
    cp $CONFIG_FILE $NEW_CONFIG_FILE
    CONFIG_FILE=$NEW_CONFIG_FILE

    NEW_READ_FILE="$READ_FILE.copy"
    cp $READ_FILE $NEW_CONFIG_FILE
    sed -i "s/$(basename $READ_FILE)/$(basename $NEW_READ_FILE)/g" $CONFIG_FILE
    READ_FILE=$NEW_READ_FILE

    RLEN=$(wc -l $READ_FILE)
    STEP=$(( ( ( RLEN / (TRIALS - 1) ) / 4 ) * 4 ))
    echo "Running $TRIALS with a step of $STEP reads (file length $RLEN)"

    echo "Long Read Count,$($ASSEMBLE header)" > $DATA_FILE
    for V in {1..10}; do run-trial $V; done #89
}

# Given a value runs a timed version of MaSurCa on it and record stats
function run-trial {
    OUT_PATH=$(printf "long-read-%i-trial" $1)

    printf '\e[1;7m %-6s \e[m\ue0b0\n' "$OUT_PATH"

    LEN=$(wc -l $LONG_READ_FILE | grep -o "^[0-9]*")

    if [ $1 -ne 1 ]
      then
        NEW_LEN=$((LEN - STEP))
        head -n $NEW_LEN $READ_FILE > temp.txt; mv temp.txt $READ_FILE
        LEN=$NEW_LEN
    fi

    READ_COUNT=$((LEN / 4))
    echo "Read Count: " $READ_COUNT

    mkdir "$OUT_PATH"
    cp "$CONFIG_FILE" "$OUT_PATH/"
    cd "$OUT_PATH" || return

    masurca $(basename $CONFIG_FILE) || exit 1
    STATS=$($ASSEMBLE)

    cd ..
    rm -rf "$OUT_PATH"

    echo "$READ_COUNT,$STATS" >> $DATA_FILE
}

run-experiment
