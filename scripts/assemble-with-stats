#!/bin/bash

# This script will run assemble.sh for a MaSuRca run and collect some stats
# plus do some other work

# CSV output to STDOUT: "(Real/Flye assembly Time), (Quorum Error correcting time),
# (Estimating genome size time), (Super-Reads time), (Mega-Reads time), (Consensus Gap Joining time)
# (num contigs), (N50), (largest contig), (total length)"

TIMER=/usr/bin/time
QUAST=/home/ubuntu/src/quast-5.0.2/quast.py

STDOUT_FILE="console-output.txt"
DATA_FILE="data.csv"

#-------------------------------------------------------------------------------

if [ $# -eq 1 ] && [ $1 == "header" ]; then
    printf "Real/Flye Assembly time,Quorum Error Correcting time,Estimating Genome Size time,"
    printf "Super-Reads time,Mega-Reads time,Consensus Gap Joining time,"
    printf "# contigs,N50,largest contig,total length"
    exit
fi

#-------------------------------------------------------------------------------

# Start by acctually running assemble.sh
START_TIME=$(date +"%s")
($TIMER -f "%E," ./assemble.sh >> $STDOUT_FILE) &> $DATA_FILE

# Helper function pulls a time from the stdout file
function extract-time {
  grep "$1" $STDOUT_FILE | grep -oP "(?<=\[).*(?=])"
  exit
}

function subtime {
  T=$(extract-time "$1")
  T=$(date +"%s" -d "$T")
  echo $(( T - START_TIME ))
}

{ subtime "Estimating genome size"; echo ",";
  subtime "Computing super reads from PE"; echo ",";
  subtime "Reducing super-read k-mer size"; echo ",";
  subtime "Refining alignments"; echo ",";
  subtime "Running assembly with Flye"; echo ","; } >> $DATA_FILE

#-------------------------------------------------------------------------------

# Run a quast report, don't let it write it's logs to stdout tho
$QUAST flye/assembly.fasta &> /dev/null

# Helper function greps the latest quast report in the current directory for
# the number that falls directly after the argument
function quast-stat {
  grep -oP "(?<=$1\t)[0-9]+" quast_results/latest/report.tsv
}

# Add the relevant stats to the datafile csv
{ quast-stat "# contigs"; echo ",";
  quast-stat "N50"; echo ",";
  quast-stat "Largest contig"; echo ",";
  quast-stat "Total length"; } >> $DATA_FILE

# Write everything out of the data file to stdout, with newlines removed
tr -d '\n' < $DATA_FILE
